-- This file contains the sql necessary to create a database used for storing
-- the data associated with atom feeds.  It provides the storage backend for
-- Firmant.

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

CREATE SCHEMA atom;

COMMENT ON SCHEMA atom IS
'This schema provides the set of functionality defined in the atom specification
that Firmant requires.  Some attributes will be automatically generated, and are
not stored in these relations.';


SET search_path = atom;

--
-- The people relation
--

CREATE TABLE people (
    name VARCHAR(32),
    uri VARCHAR(2048),
    email VARCHAR(320),
    CONSTRAINT people_pkey PRIMARY KEY (name)
);

COMMENT ON TABLE people IS
'The name is limited to 32 characters as that seems long enough for most any
name.

The URI is limited to 2048 characters as some browsers with majority market
share do not accept a longer URI (besides, such a link would most likely be
spam.)

The email is limited to 320 (64+1+255) characters as that is the maximum length
of an email address.';


--
-- The categories relation
--

CREATE TABLE categories (
    term VARCHAR(32),
    label VARCHAR(255),
    CONSTRAINT categories_pkey PRIMARY KEY (term),
    CONSTRAINT categories_valid_term CHECK (term ~ E'^[-\\_a-zA-Z0-9]{1,32}$')
);

COMMENT ON TABLE categories IS 'Scheme can be generated.';


--
-- The content relation
--

CREATE TABLE content (
    id SERIAL,
    content TEXT,
    summary TEXT,
    CONSTRAINT content_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE content is
'This provides a minimal set of the functionality required by the atom spec.
Source attributes are not supported at this point in time.  The type attribute
is not stored in the database.  It will be generated when markdown support is
implemented.';


--
-- The entries relation
--

CREATE TABLE entries (
    slug VARCHAR(96) NOT NULL,
    published_date DATE NOT NULL,
    published_time TIME(0) WITH TIME ZONE NOT NULL,
    author VARCHAR(32) NOT NULL,
    category VARCHAR(32),
    rights TEXT,
    CONSTRAINT entries_pkey PRIMARY KEY (slug, published_date),
    CONSTRAINT entries_valid_slug CHECK (slug ~ E'^[-\\_a-zA-Z0-9]{1,96}$'),
    CONSTRAINT entries_author_fkey
        FOREIGN KEY (author) REFERENCES people (name)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT entries_category_fkey
        FOREIGN KEY (category) REFERENCES categories (term)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

COMMENT ON TABLE entries IS
'This table contains the information that should be the same for all
revisions of a post.  As only the most current revision should be public, this
table ensures that the author, categories and rights stay consistent across
edits.';


--
-- The entry_revisions relation
--

CREATE TABLE entry_revisions (
    slug VARCHAR(96) NOT NULL,
    published_date DATE NOT NULL,
    published_time TIME(0) WITH TIME ZONE NOT NULL,
    updated TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
    title VARCHAR(96) NOT NULL,
    content INTEGER NOT NULL,
    summary INTEGER,
    CONSTRAINT entry_revisions_pkey PRIMARY KEY (slug, published_date, updated),
    CONSTRAINT entry_revisions_entries_fkey
        FOREIGN KEY (slug, published_date)
        REFERENCES entries (slug, published_date)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT entry_revisions_content_fkey
        FOREIGN KEY (content) REFERENCES content (id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    CONSTRAINT entry_revisions_summary_fkey
        FOREIGN KEY (summary) REFERENCES content (id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

COMMENT ON TABLE entry_revisions IS
'This table has information that is able to be unique to a particular edit.  The
slug and published relate to the ''entries'' table.  The title can change in a
particular revision, as can the references to the content and summary.';


--
-- The feeds relation
--

CREATE TABLE feeds (
    slug VARCHAR(96) NOT NULL,
    title VARCHAR(96) NOT NULL,
    rights TEXT,
    subtitle TEXT,
    CONSTRAINT feeds_pkey PRIMARY KEY (slug),
    CONSTRAINT feeds_valid_slug CHECK (slug ~ E'^[-\\_a-zA-Z0-9]{1,96}$')
);

COMMENT ON TABLE feeds IS
'Updated should be generated from the feed''s contents.
Author is left for each entry to have.
Category is left for each entry to have.
Contributor is left for each entry to have.
Generator should be generated by the software.';


--------------------------------------------------------------------------------
-- Join Tables -----------------------------------------------------------------
--------------------------------------------------------------------------------

CREATE TABLE _feeds_entries_join (
    feeds_slug VARCHAR(96),
    entries_slug VARCHAR(96),
    entries_published_date DATE,
    CONSTRAINT _feeds_entries_join_pkey
        PRIMARY KEY (feeds_slug, entries_slug, entries_published_date),
    CONSTRAINT _feeds_entries_join_feeds_fkey
        FOREIGN KEY (feeds_slug) REFERENCES feeds (slug)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT _feeds_entries_join_entries_fkey
        FOREIGN KEY (entries_slug, entries_published_date)
        REFERENCES entries (slug, published_date)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);


CREATE TABLE _entries_contributors_join (
    entries_slug VARCHAR(96),
    entries_published_date DATE,
    contributor_name VARCHAR(32),
    CONSTRAINT _entries_contributors_join_pkey
        PRIMARY KEY (entries_slug, entries_published_date, contributor_name),
    CONSTRAINT _entries_contributors_entries_fkey
        FOREIGN KEY (entries_slug, entries_published_date)
        REFERENCES entries (slug, published_date)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT _entries_contributors_contributors_fkey
        FOREIGN KEY (contributor_name) REFERENCES people (name)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);
